// The registered persons
sig Person  {
    Tutors : set Person,    // Each person tutors a set of persons
    Teaches : set Class     // Each person teaches a set of classes
}

// The registered groups
sig Group {}

// The registered classes
sig Class  {
    Groups : Person -> Group    // Each class has a set of persons assigned to a group
}

// Some persons are teachers (subtype of Person)
sig Teacher in Person {}

// Some persons are students (subtype of Person)
sig Student in Person {}

// Every person is a student
pred inv1 {
    Person in Student
}

// There are no teachers
pred inv2 {
    no Teacher
}

// No person is both a student and a teacher
pred inv3 {
    no Student & Teacher
}

// No person is neither a student nor a teacher
pred inv4 {
    all p: Person | p in Student or p in Teacher
}

// There are classes assigned to teachers
pred inv5 {
    some t: Teacher | t.Teaches != none
}

// Every teacher has classes assigned
pred inv6 {
    all t: Teacher | t.Teaches != none
}

// Every class has teachers assigned
pred inv7 {
    all c: Class | some t: Teacher | c in t.Teaches
}

// Teachers are assigned at most one class
pred inv8 {
    all t: Teacher | #t.Teaches <= 1
}

// No class has more than one teacher assigned
pred inv9 {
    all c: Class | #(Teacher <: Teaches.c) <= 1
}

// For every class, every student has a group assigned
pred inv10 {
    all c: Class, s: Student | some g: Group | (s -> g) in c.Groups
}

// A class only has groups if it has a teacher assigned
pred inv11 {
    all c: Class | (some t: Teacher | c in t.Teaches) => (some g: Group | some p: Person | (p -> g) in c.Groups)
}



