// The registered persons
sig Person  {
    Tutors : set Person,    // Each person tutors a set of persons
    Teaches : set Class     // Each person teaches a set of classes
}

// The registered groups
sig Group {}

// The registered classes
sig Class  {
    Groups : Person -> Group    // Each class has a set of persons assigned to a group
}

// Some persons are teachers (subtype of Person)
sig Teacher in Person {}

// Some persons are students (subtype of Person)
sig Student in Person {}

// Every person is a student
pred inv1 {
    all p: Person - Student | p in Student
}

// There are no teachers
pred inv2 {
    no Teacher
}

// No person is both a student and a teacher
pred inv3 {
    no Student & Teacher
}

// No person is neither a student nor a teacher
pred inv4 {
    all p: Person | p in Student or p in Teacher
}

// There are classes assigned to teachers
pred inv5 {
    some t: Teacher | t.Teaches != none
}

// Every teacher has classes assigned
pred inv6 {
    all t: Teacher | t.Teaches != none
}

// Every class has teachers assigned
pred inv7 {
    all c: Class | some p: Person | p in c.Groups and p in Teacher
}

// Teachers are assigned at most one class
pred inv8 {
    all t: Teacher | #t.Teaches <= 1
}

// No class has more than one teacher assigned
pred inv9 {
    all c: Class | #c.Groups in Teacher <= 1
}

// For every class, every student has a group assigned
pred inv10 {
    all c: Class, s: Student | some g: Group | (s -> g) in c.Groups
}

// A class only has groups if it has a teacher assigned
pred inv11 {
    all c: Class | (some t: Teacher | t in c.Groups) => (some g: Group | g in c.Groups)
}

// Each teacher is responsible for some groups
pred inv12 {
    all t: Teacher | some g: Group | t in g
}

// Only teachers tutor, and only students are tutored
pred inv13 {
    all p: Person | (p in Teacher implies (some p': p.Tutors | p' in Student)) and
                    (p in Student implies (some p': p.Tutors | p' in Teacher))
}

// Every student in a class is at least tutored by the teachers assigned to that class
pred inv14 {
    all c: Class, s: Student | s in c.Groups implies some t: Teacher | t in c.Groups and t.Tutors in s
}

// Assuming a universe of 3 persons, the tutoring chain of every person eventually reaches a Teacher
pred inv15 {
    all p: Person | p in p.Tutors.*(Person) and some t: Teacher | t in p.Tutors.*(Person)
}
